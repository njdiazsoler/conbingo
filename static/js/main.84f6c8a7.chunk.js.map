{"version":3,"sources":["views/Layout.js","components/BingoGrid.js","utils/parsing.js","views/BingoCard.js","views/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Layout","props","Navbar","bg","variant","Brand","href","toUpperCase","Toggle","aria-controls","Collapse","id","Nav","className","Link","children","BingoGrid","items","style","height","map","item","index","Card","role","Body","padding","list","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","BingoCard","defaultItems","Array","fill","useState","setItems","data","imagePath","options","console","log","createDownloadFile","a","node","document","getElementById","htmlToImage","backgroundColor","pixelRatio","imgBlob","saveAs","error","data-testid","fluid","src","Button","onClick","newTable","parsingUtils","el","ix","disabled","every","Home","FadingRoute","Component","component","path","rest","render","routeProps","Fade","appear","substr","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM"],"mappings":"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","file":"static/js/main.84f6c8a7.chunk.js","sourcesContent":["import {\r\n  Nav,\r\n  Navbar,\r\n} from \"react-bootstrap\";\r\n\r\nconst Layout = (props) => {\r\n  return (\r\n    <div>\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"/\">\r\n          {'Conbingo'.toUpperCase()}\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"/nintendo\">Nintendo Direct</Nav.Link>\r\n            <Nav.Link href=\"/playstation\">State of Play</Nav.Link>\r\n            <Nav.Link href=\"/blizzard\">Blizzcon</Nav.Link>\r\n            <Nav.Link href=\"/custom\">Custom</Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import { Card } from \"react-bootstrap\";\r\n\r\nconst BingoGrid = (props) => {\r\n  const { items } = props;\r\n  return (\r\n    <div\r\n      className=\"align-content-center container d-flex flex-row flex-wrap justify-content-center\"\r\n      style={{\r\n        height: \"80vh\",\r\n      }}\r\n    >\r\n      {items.map((item, index) => {\r\n        return (\r\n          <Card\r\n            className=\"border-dark custom-card m-1 text-body\"\r\n            key={index}\r\n            role=\"bingo-card\"\r\n          >\r\n            <Card.Body style={{ padding: \".5rem\" }}>\r\n              {item}\r\n            </Card.Body>\r\n          </Card>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BingoGrid;\r\n","const shuffle = (list) => {\r\n  let currentIndex = list.length,\r\n    temporaryValue,\r\n    randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = list[currentIndex];\r\n    list[currentIndex] = list[randomIndex];\r\n    list[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return list;\r\n};\r\n\r\nexport default { shuffle };\r\n","import { useState } from \"react\";\r\n// import image from \"../assets/img/Supporter-Blizzard-Entertainment-Logo.png\";\r\n// import data from \"./data.json\";\r\nimport * as htmlToImage from \"html-to-image\";\r\nimport { saveAs } from \"file-saver\";\r\nimport {\r\n  Button,\r\n  Image as BootstrapImage,\r\n} from \"react-bootstrap\";\r\nimport BingoGrid from \"../components/BingoGrid\";\r\nimport parsingUtils from \"../utils/parsing\";\r\n\r\nconst BingoCard = props => {\r\n  const defaultItems = new Array(25).fill(false);\r\n  const [items, setItems] = useState(defaultItems);\r\n  const { imagePath, options } = props.data;\r\n  console.log('bingocard props', props)\r\n\r\n  const handleGenerateClick = () => {\r\n    // const newTable = new Array(25).fill().map(() => Math.floor(Math.random() * 10))\r\n    console.log('options on click are', options)\r\n    const newTable = parsingUtils.shuffle(\r\n      new Array(25)\r\n        .fill()\r\n        .map((el, ix) => options[ix])\r\n    );\r\n    setItems(newTable);\r\n  };\r\n\r\n  const createDownloadFile = async () => {\r\n    const node = document.getElementById(\"main-app\");\r\n\r\n    try {\r\n      const imgBlob = await htmlToImage.toBlob(node, {\r\n        backgroundColor: \"#282c34\",\r\n        pixelRatio: 1,\r\n      });\r\n      saveAs(imgBlob, \"conbingo.png\");\r\n    } catch (error) {\r\n      console.error(\"oops, something went wrong!\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div id=\"main-app\">\r\n        <header className=\"App-header\" data-testid=\"page-header\">\r\n          <div className=\"flex\">\r\n            <BootstrapImage\r\n              className=\"custom-img\"\r\n              fluid\r\n              src={imagePath}\r\n              role=\"header-image\"\r\n            />\r\n          </div>\r\n        </header>\r\n        <div className=\"container\" data-testid=\"card-container\">\r\n          <BingoGrid items={items} />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <Button\r\n          role=\"generate-button\"\r\n          onClick={handleGenerateClick}\r\n        >\r\n          Generate!\r\n        </Button>\r\n        <Button\r\n          disabled={items.every((item) => !item)}\r\n          role=\"download-button\"\r\n          onClick={() => createDownloadFile()}\r\n        >\r\n          Download!\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BingoCard;","import BingoCard from './BingoCard';\r\nimport data from '../data.json';\r\n\r\nconst Home = props => {\r\n  // return <h2 style={{ color: 'white', marginTop: 20 }}>Please select your conference above! ↑↑↑</h2>;\r\n  return <BingoCard data={data[\"playstation\"]} />\r\n}\r\n\r\nexport default Home\r\n\r\n// function Topics() {\r\n//   let match = useRouteMatch();\r\n//   const idA = 3214;\r\n//   const idB = 1562;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Topics</h2>\r\n\r\n//       <ul>\r\n//         <li>\r\n//           <Link to={`${match.url}/${idA}`}>Components</Link>\r\n//         </li>\r\n//         <li>\r\n//           <Link to={`${match.url}/${idB}`}>\r\n//             Props v. State\r\n//           </Link>\r\n//         </li>\r\n//       </ul>\r\n\r\n//       {/* The Topics page has its own <Switch> with more routes\r\n//           that build on the /topics URL path. You can think of the\r\n//           2nd <Route> here as an \"index\" page for all topics, or\r\n//           the page that is shown when no topic is selected */}\r\n//       <Switch>\r\n//         <Route path={`${match.path}/:bingoId`}>\r\n//           <Topic />\r\n//         </Route>\r\n//         <Route path={match.path}>\r\n//           <h3>Please select a topic.</h3>\r\n//         </Route>\r\n//       </Switch>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// function Topic() {\r\n//   let { bingoId } = useParams();\r\n//   return <h3>Requested bingo ID: {bingoId}</h3>;\r\n// }\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  // Link,\r\n  // useRouteMatch,\r\n  // useParams,\r\n} from \"react-router-dom\";\r\nimport { Fade } from 'react-bootstrap';\r\nimport Layout from \"./views/Layout\";\r\nimport Home from './views/Home';\r\nimport BingoCard from './views/BingoCard';\r\nimport data from \"./data.json\";\r\nimport \"./App.css\";\r\n\r\nconst App = props => {\r\n  return (\r\n    <Layout>\r\n      <Router>\r\n        <div>\r\n          <Switch>\r\n            <FadingRoute path=\"/nintendo\" component={BingoCard} />\r\n            <FadingRoute path=\"/microsoft\" component={BingoCard} />\r\n            <FadingRoute path=\"/blizzard\" component={BingoCard} />\r\n            <FadingRoute path=\"/playstation\" component={BingoCard} />\r\n            {/* <Route path=\"/ea\" component={About} />\r\n          <Route path=\"/square\" component={About} /> */}\r\n            {/* <FadingRoute path=\"/custom\" component={BingoCard} /> */}\r\n            <FadingRoute path=\"/\" component={Home} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nconst FadingRoute = ({ component: Component, path, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={routeProps => (\r\n        <Fade appear={true}>\r\n          <Component {...routeProps} data={data[path.substr(1)]} />\r\n        </Fade>\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}